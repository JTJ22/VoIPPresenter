@page "/StartListening"
@rendermode InteractiveServer
@inject HandleListener listener

<PageTitle>Start Listening</PageTitle>


<div>
    <label for="portConf">Enter an IP and port:</label>
    <input id="portConf" type="text" name="portConf" size="30" placeholder="Port" @bind="_newPort" />
    <input id="ipConf" type="text" name="ipConf" size="30" placeholder="IP" @bind="_ipAddress" />
    <button class="btn btn-primary" @onclick="Added">Create Listener</button>
    <button class="btn btn-primary" @onclick="Removed">Create Listener</button>
</div>



@code
{
    private string _ipAddress = string.Empty;
    private string _newPort = string.Empty;
    ActiveListener newListener;

    protected override async Task OnInitializedAsync()
    {
        // await listener.CreateWaveformAudio(@"C:\Users\James\Desktop\Dissertation\VoIPPresenter\output_0.wav", @"C:\Users\James\Desktop\Dissertation\VoIPPresenter\wwwroot\images");
    }

    private async Task Added()
    {	
        if(PortValid(out int portNo) && IpValid())
        {
            newListener = new ActiveListener(_ipAddress, portNo);
            listener.AddListener(newListener);
        }
        else
        {

        }
    }

    private async Task Removed()
    {
        newListener.Stop();

    }

    private bool ValidListener()
    {
        return PortValid(out int portNo) && IpValid() && !DoesListenerExist(portNo);
    }

	private bool DoesListenerExist(int portNo)
	{
        foreach (KeyValuePair<Guid, ActiveListener> listener in listener.GetListeners())
        {
            if(listener.Value.portNo != portNo && listener.Value.ipAddress != _ipAddress)
            {
				return false;
            }
        }
		return true;
    }

    private bool PortValid(out int portNo) => int.TryParse(_newPort, out portNo) && portNo >= 0 && portNo <= 65535;

	private bool IpValid() => IPAddress.TryParse(_ipAddress, out _);
}